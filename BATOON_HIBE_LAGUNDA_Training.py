# -*- coding: utf-8 -*-
"""LSTM-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AukEGYblqBVLXLElHGHwd3TbCyRGlGWB
"""



import numpy as np
import pandas as pd

# Set the random seed for reproducibility
np.random.seed(42)

# Generate 50,000 low temperatures between 0 and 50 degrees (adjust range as needed)
low_temps = np.random.uniform(15, 25, size=50000)

# Generate 50,000 high temperatures between 50 and 100 degrees (adjust range as needed)
high_temps = np.random.uniform(27, 35, size=50000)

# Create a DataFrame with the generated temperatures
df = pd.DataFrame({'Low Temp': low_temps, 'High Temp': high_temps})

# Save the DataFrame to a CSV file named 'temperatures.csv'
df.to_csv('temperatures.csv', index=False)

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load the dataset
df = pd.read_csv('temperatures.csv')

# Extract the 'Low Temp' column as the target variable
data = df['Low Temp'].values.reshape(-1, 1)

# Scale the data to the range [0, 1]
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

# Split the data into training and testing sets
train_size = int(len(data) * 0.8)
train_data, test_data = data[0:train_size], data[train_size:len(data)]

# Create sequences of data for the LSTM model
def create_dataset(dataset, look_back=1):
    X, Y = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        X.append(a)
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 10
X_train, Y_train = create_dataset(train_data, look_back)
X_test, Y_test = create_dataset(test_data, look_back)

# Reshape the input data to be [samples, time steps, features]
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

# Train the model
model.fit(X_train, Y_train, epochs=100, batch_size=32)
model.save('lstm_model.h5')

model.save('lstm_model.h5')

# Make predictions on the test data
predictions = model.predict(X_test)

# Invert the scaling to get the actual temperature values
predictions = scaler.inverse_transform(predictions)
Y_test = scaler.inverse_transform([Y_test])

# Evaluate the model
# ... (e.g., calculate RMSE, plot predictions vs. actual values)

from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import numpy as np

model = load_model('lstm_model.h5')  # Replace with your model path
scaler = MinMaxScaler()  # You might need to load or recreate your scaler

temp = 24
input_data = scaler.fit_transform(np.array([[temp]]))
input_data = input_data.reshape(1, 1, 1)  # Assuming look_back=1

prediction = model.predict(input_data)

if prediction < 0.4:  # Adjust threshold as needed (0.5 after scaling)
    label = "LOW"
else:
    label = "HIGH"

print(f"The predicted label for 29 degrees Celsius is: {label}")

from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import numpy as np

def predict_temperature_label(test_temp, threshold=0.3):
    """Predicts the temperature label (LOW or HIGH) based on the test temperature.

    Args:
        test_temp: The test temperature in Celsius.
        threshold: The threshold value for classification (default: 0.5).

    Returns:
        The predicted temperature label (LOW or HIGH).
    """

    # Load the model and scaler
    model = load_model('lstm_model.h5')  # Replace with your model path
    scaler = MinMaxScaler()

    # Preprocess the input
    input_data = scaler.fit_transform(np.array([[test_temp]]))
    input_data = input_data.reshape(1, 1, 1)  # Assuming look_back=1

    # Make prediction
    prediction = model.predict(input_data)[0][0]  # Extract the prediction value

    # Determine the label based on the threshold
    if prediction < threshold:
        label = "LOW"
    else:
        label = "HIGH"

    return label

# Example usage
test_temperature = 33
predicted_label = predict_temperature_label(test_temperature, threshold=0.6)  # Adjust threshold as needed
print(f"The predicted label for {test_temperature} degrees Celsius is: {predicted_label}")

model.save('lstm_model.h5')